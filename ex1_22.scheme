(define (find-divisor n test-divisor)
    (define (divides? a b) (= (remainder b a) 0))
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
(define (smallest-divisor n)
    (find-divisor n 2))
(define (prime? n)
    (= n (smallest-divisor n)))

(define (report-prime elasped-time)
    (display " *** ")
    (display elasped-time)
    true)
(define (start-prime-test n start-time)
    (if (prime? n) 
        (report-prime (- (runtime) start-time))
        false))
(define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime)))

(define (search-for-primes n count)
    (define (even? x) (= (remainder x 2) 0))
    (define (next x) 
        (cond ((even? x) (+ x 1))
              (else (+ x 2))))
    (if (> count 0)
        (if (timed-prime-test n) 
            (search-for-primes (next n) (- count 1))
            (search-for-primes (next n) count)))
    true)
